{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab720
\pard\tx220\tx720\pardeftab720\li720\fi-720\ql\qnatural
\ls1\ilvl0
\f0\fs24 \cf0 {\listtext	\'95	}Given the following function definition: void addBack(struct vector *vec,struct data *dta). This function will add the data element to the back of the vector\
{\listtext	\'95	}\
{\listtext	\'95	}Given the following funciton definition: void removeFront(struct vector *vec). This function will remove the element from the front of the vector.\
{\listtext	\'95	}\
{\listtext	\'95	}Given the following function definition: float sumVector(struct vector *vec). This function will get the sum of all of the the data structs in the vector. Us the sumData function from data.h to get the sum of each data element.\
{\listtext	\'95	}\
{\listtext	\'95	}Given the following function definition: struct vector* cloneVector(struct vector *vec). This function will create a copy of the input vector. The new vector will have it's own independent data elements and will not share pointers with the input vector. This is called a deep copy.\
{\listtext	\'95	}\
{\listtext	\'95	}Given the following function definition: int compareVectors(struct vector *vec1,struct vector *vec2). This function will compare two vectors and return 1 if they are the same and 0 if they are not. Two vectors are said to be equal if they have the same size and the data elements at each position in the array are the same. So for example vec1->array[0] = vec2->array[0], vec1->array[1] = vec2->array[1], ...,vec1->array[n] = vec2->array[n].\
{\listtext	\'95	}\
{\listtext	\'95	}Given the following function definition: void reverseVector(struct vector *vec). This function will reverse the elements in the vector's array. You are to reverse the elements in place, meaning you can not create a new vector for this.\
{\listtext	\'95	}Given the following function definition: void cleanVector(struct vector *vec). This function will free all memory associated with the vector.\
}